#include "europtus.nddl"

class AUVPos extends Timeline {

    predicate Position {
      	float latitude, longitude;
	float depth, height, z;

	duration == 1;
    }

    AUVPos() {}
}

class TrexPath {
  int   waypoints;
  float distance;
  float entry_dx, entry_dy;
  float exit_dx, exit_dy;

    TrexPath(float dist, float ax, float ay, float zx, float zy, int wp) {
    distance = dist;
    entry_dx = ax;
    entry_dy = ay;
    exit_dx = zx;
    exit_dy = zy;
    waypoints = wp;
  }


    TrexPath(float dist, float x, float y, int wp) {
    distance = dist;
    entry_dx = x;
    entry_dy = y;
    exit_dx = x;
    exit_dy = y;
    waypoints  = wp;
  }
}

class DrifterFollow extends Timeline {
    predicate undefined {}
    predicate Failed {}
    predicate Inactive {}
    predicate DoSurvey {}
    predicate Survey {
	float center_lat, center_lon;
	float heading;
	float u, v;
	bool lagrangian;
	TrexPath path;
	float size;
    }

    DrifterFollow() {
	super();
    }
}

DrifterFollow::Survey {
    meets(Inactive idle);

    float duration_f;
    // Set my duration to 1 second
    temporalDistance(start, duration, end);
    ceil(duration_f) == duration;
    duration_f * TICK_DURATION == 1.0;   

    dispatchable(false, path, size, center_lat, center_lon);
}



class SpeedControl extends Timeline {
    float min_speed, max_speed;
    predicate Holds {
	float speed, speed_2;
	0.0 < speed;
	speed == sqrt(speed_2);
	temporalDistance(start, duration, end);
    }

    SpeedControl(float mi, float ma) {
	super();
	min_speed = mi;
	max_speed = ma;
    }
}

SpeedControl::Holds {
    object.min_speed <= speed;
    speed <= object.max_speed;
}

class AUV {
    float waypoint_idle;
    
    action exec_survey {
	float distance_from_start, distance;
	float entry_lat, entry_lon;
	float exit_lat, exit_lon;
	// necessarily starts during mission
	0 <= start;
	start <= FINAL_TICK;
    }

    DrifterFollow drifter;
    SpeedControl  speed;
    AUVPos        estate;

    AUV(float mi, float ma, float idle) {
	drifter = new DrifterFollow();
	speed = new SpeedControl(mi, ma);
	estate = new AUVPos();
	waypoint_idle = idle;
    }
}

AUV::exec_survey {
    // conditions
    starts_during(condition plan_state.execute my_exec);
    starts_during(condition DrifterFollow.Inactive idle);
    after(condition AUVPos.Position pos);
    contained_by(condition SpeedControl.Holds sp);

    // constraints
    ends(DrifterFollow.DoSurvey exec);
    precedes(start, exec.start);
    
    // effects
    meets(effect DrifterFollow.Survey survey);

    // object constraints
    idle.object == object.drifter;
    exec.object == object.drifter;
    survey.object == object.drifter;
    pos.object == object.estate;
    sp.object == object.speed;

   
    TrexPath p;
    float _bind_u_2, _bind_v_2, _bind_heading;
    float heading_deg, cos_angle, sin_angle, speed_2, drift_speed, my_speed;
    float o_lat, o_lon;
    float shift_ax, shift_ay, shift_zx, shift_zy;

    // effect constraints
    p == survey.path;
    (p.distance * survey.size) == distance;
    
    survey.heading == to_rad(heading_deg);
    survey.heading == _bind_heading;

    abs(survey.u) == sqrt(_bind_u_2);
    abs(survey.v) == sqrt(_bind_v_2);
    _bind_u_2 < sp.speed_2;
    _bind_v_2 < sp.speed_2;
    speed_2 == (_bind_u_2 + _bind_v_2);
    drift_speed == sqrt(speed_2);

    o_lat == survey.center_lat;
    o_lon == survey.center_lon;

    shift_ax == (survey.size * p.entry_dx);
    shift_ay == (survey.size * p.entry_dy);
    shift_zx == (survey.size * p.exit_dx);
    shift_zy == (survey.size * p.exit_dy);
    // condition constraints
    int time_to_move, time_since_pos, survey_time;
    float half_speed, travel_s, idle_s, wp_f;
    float ttm_f, ttm_sec, tsp_f, st_f, st_sec;

    travel_s >= 0.0;
    idle_s >= 0.0;
    
    pos ends_during idle;
    idle meets exec;
    exec meets survey;

    half_speed * 2.0 == sp.speed;

    time_since_pos >= 0;
    temporalDistance(pos.end, time_since_pos, start);
    ceil(tsp_f) == time_since_pos;
    tsp_f * TICK_DURATION <= 600.0; // position is no older than 10mn; 
   
    distance_from_start == ll_dist(pos.latitude, pos.longitude, entry_lat, entry_lon);
    temporalDistance(start, time_to_move, exec.start);
    ceil(ttm_f) == time_to_move;
    ttm_sec == (ttm_f * TICK_DURATION);
    distance_from_start <= ttm_sec * sp.speed;
    ttm_f * half_speed <= distance_from_start;

    temporalDistance(exec.start, survey_time, exec.end);
    ceil(st_f) == survey_time;
    st_sec == (st_f * TICK_DURATION);
    st_sec == travel_s + idle_s;

    distance <= (travel_s * sp.speed);
    (travel_s * half_speed) <= distance;
    ceil(wp_f) == p.waypoints;
    idle_s == (wp_f * object.waypoint_idle);

    
    
    // Identify heading, drifting speed and whether I am lagrangian 
    bool s_lag, is_lagrangian;

    s_lag == survey.lagrangian;
    0.0 <= my_speed;
    my_speed <= drift_speed;

    if( true==s_lag ) {
	my_speed == drift_speed;
    } else {
	my_speed == 0.0;
    }

    testLEQ(is_lagrangian, 0.01, my_speed);
    -1.0 <= cos_angle;
    cos_angle <= 1.0;
    -1.0 <= sin_angle;
    sin_angle <= 1.0;

    if( 0.0==drift_speed ) {
	cos_angle == cos(heading_deg);
	sin_angle == sin(heading_deg);
    } else {
	(cos_angle * drift_speed) == survey.u;
	(sin_angle * drift_speed) == survey.v;
    }

    // compute my waypoints a_* is entry, z_* is exit 
    float a_east, a_north, z_east, z_north;
    
    a_east == (shift_ax * cos_angle) + (shift_ay * sin_angle);
    a_north == (shift_ay * cos_angle) - (shift_ax *sin_angle);
    z_east == (shift_zx * cos_angle) + (shift_zy * sin_angle);
    z_north == (shift_zy * cos_angle) - (shift_zx *sin_angle);

    ll_displace(o_lat, o_lon, a_north, a_east, entry_lat, entry_lon);
    ll_displace(o_lat, o_lon, z_north, z_east, exit_lat, exit_lon);
}

