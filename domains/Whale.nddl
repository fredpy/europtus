#include "neptus.nddl"
#include "TrexAUV.nddl"
#include "uav.nddl"

class survey_pair {
    TrexPath ref, inner;

    survey_pair(TrexPath a, TrexPath b) {
	ref = a;
	inner = b;
    }
}

class WhalePos extends Timeline {
    predicate Position {
	float latitude, longitude;
	duration == 1;
    }

    WhalePos() {
	super();
    }
}

class SurveyIter extends Timeline {
    predicate Inactive {}

    predicate Iter {
	float scale;
	float heading;
	survey_pair surveys;
	int count;
	int estimated_duration,
	    end_estimate,
	    get_started;
	precedes(start, end_estimate);
	count >= 0;
    }
    predicate Transit {
	bool is_final;
	int count;
	count > 0;
    }
    

    SurveyIter() {}
}



class WhaleFollow extends Timeline {
    SurveyIter iterator;
    
     predicate Inactive {}
      predicate Active {
	  float       scale;
	  float       heading;
	  survey_pair surveys;
	  int total;
	  total > 0;
      }


      WhaleFollow() {
	  iterator = new SurveyIter();
      }
}

WhaleFollow::Inactive {
    equals(SurveyIter.Inactive idle);
    idle.object == object.iterator;
}

WhaleFollow::Active {
    TrexPath outter, inner;
    float _bind_heading;

    heading == _bind_heading; // solver will set heading toward 0
    0 <= start;
    end <= FINAL_TICK;
    temporalDistance(start, duration, end);

    outter == surveys.ref;
    inner == surveys.inner;

    met_by(Inactive idle);
    starts(SurveyIter.Iter first);
    first.count == 0;
    first.object == object.iterator;

    // ends(SurveyIter.Transit fin);
    // fin.object == object.iterator;
    // fin.count == total;

    temporalDistance(start, duration, end);
    total < duration;
}

SurveyIter::Iter {
    WhaleFollow me;
    me.iterator == object;
    contained_by(WhaleFollow.Active active);
    active.object == me;
    active.scale == scale;
    active.heading == heading;
    active.surveys == surveys;

    // A very rough first estimate of the upper bound :
    // I can do better than that
    int remain, extra;
    temporalDistance(end, remain, active.end);
    extra * estimated_duration <= remain; 

    int  counter;
    counter == count + 1;
    
    // meets(Transit next);
    // next starts_during active;
    // next.count == counter;

    // int get_started;
    estimated_duration >= 1;

    get_started + 300 <= end;
    get_started + 300 <= end_estimate;
    if( get_started <= CUR_DATE ) {
	meets(Transit transit);
	active contains transit;
	count + 1 == transit.count;
    }
    
    active.total <= counter + extra;
}

SurveyIter::Transit {
     WhaleFollow me;
     me.iterator == object;

     contained_by(WhaleFollow.Active active);
     count <= active.total;

     testEQ(is_final, count, active.total);
     if( is_final==true ) {
	 concurrent(end, active.end);
     }
}

class Whale {
    WhaleFollow survey;
    WhalePos    estate;
    string      uav_message;

    action iterate {}
    action finalize {}
    
    action track {
	float scale, heading;
	survey_pair  surveys;
    }

    action locate {}

    Whale() {
	survey = new WhaleFollow();
	estate = new WhalePos();
	uav_message = "UAV Operation requested";
    }
    Whale(string msg) {
	survey = new WhaleFollow();
	estate = new WhalePos();
	uav_message = msg;
    }
}


Whale::locate {
    duration == 1;
    temporalDistance(start, duration, end);
    
    // conditions:
    starts_during(condition europtus.execute);
    // setting this as a condition will make
    // this action block until prep is justified
    ends(UAV.charge prep);
    precedes(prep.start, start);
    // effects
    starts(effect Neptus.Message msg);
    before(effect WhalePos.Position spot);
   
    UAV me;
    Battery bat;

    // constraints on objects
    spot.object == object.estate;
    me == prep.object;

    // constraints on conditions
    prep.end_level == bat.max_level;

    // constraints on effects
    msg.content == object.uav_message;

    meets(me.fly operate);
    operate contains_start spot;

    int time_to_find, time_to_get_back;
    temporalDistance(operate.start, time_to_find, spot.start);
    temporalDistance(spot.start, time_to_get_back, operate.end);
    time_to_get_back <= (time_to_find + 20); // hard code a padding for now

    float duration_f, duration_s;
    temporalDistance(operate.start, operate.duration, operate.end);
    ceil(duration_f) == operate.duration;
    duration_f * TICK_DURATION == duration_s;
    
    // 2.0 * duration_s >= me.flight_time;
    duration_s <= 0.9*me.flight_time;

    operate.end <= FINAL_TICK;
}

Whale::finalize {
    equals(effect SurveyIter.Transit transit);
    contained_by(WhaleFollow.Active active);

    WhaleFollow my_whale;
    my_whale == object.survey;
    active.object == my_whale;
    transit.object == my_whale.iterator;
    
    transit.count <= active.total;
    transit.is_final == true;
}

Whale::iterate { 
    equals(effect SurveyIter.Transit transit);
    meets(condition SurveyIter.Iter iter);

    contained_by(WhaleFollow.Active active);
    
    WhaleFollow my_whale;
    my_whale == object.survey;
    active.object == my_whale;
    iter.object == my_whale.iterator;
    transit.object == my_whale.iterator;

    iter.count == transit.count;
    iter.count < active.total;
    transit.is_final == false;
}


// Whale::iterate {
//     starts_during(condition europtus.execute);
//     ends(condition SurveyIter.Iter iter);
//     meets(effect SurveyIter.Transit transit);
    
//     // object constraint    
//     contained_by(WhaleFollow.Active active);
//     active contains iter;
//     active contains transit;

//     int counter;

//     counter == iter.count;
    
//     counter >= 0;
//     counter + 1 == transit.count;
//     transit.count <= active.total;
    
//     WhaleFollow me;
//     me == object.survey;
//     active.object == me;
//     iter.object == me.iterator;
//     transit.object == me.iterator;

//     if( counter==0 ) {
// 	concurrent(iter.start, active.start);
//     }
//     if( counter>0 ) {
// 	after(condition SurveyIter.Transit prev);
// 	prev.object == me.iterator;
// 	prev meets iter;
// 	active contains prev;
// 	prev.count == counter;
//     }
// }


Whale::track {
    starts_during(condition europtus.execute);
    met_by(condition WhalePos.Position last_pos);
    contains(condition DrifterFollow.Survey survey_a);
    contains(condition DrifterFollow.Survey survey_b);
    
    equals(effect SurveyIter.Iter active);
    

    DrifterFollow a, b;
    WhaleFollow my_whale;

    my_whale == object.survey;
    
    // constraint on objects
    a != b;
    survey_a.object == a;
    survey_b.object == b;
    last_pos.object == object.estate;
    active.object == my_whale.iterator;

    // constraint on effects
    active.surveys == surveys;
    active.scale == scale;
    active.heading == heading;

    int end_a, end_b;

    survey_a.path == surveys.ref;
    survey_a.size == active.scale;
    survey_a.lagrangian == false;
    survey_a.heading == heading;
    survey_a.center_lat == last_pos.latitude;
    survey_a.center_lon == last_pos.longitude;
    temporalDistance(survey_a.end, end_a, end);

    float scale_inner;
    active.scale > 0.0;
    scale_inner > 0.0;
    
    survey_b.path == surveys.inner;
    survey_b.size == scale_inner;
    survey_b.lagrangian == false;
    survey_b.heading == heading;
    survey_b.center_lat == last_pos.latitude;
    survey_b.center_lon == last_pos.longitude;
    temporalDistance(survey_b.end, end_b, end);

    0 == min(end_a, end_b);
    
    contains(a.DoSurvey exec_a);
    exec_a meets survey_a;
    starts_during(condition a.Inactive idle_a);
    idle_a meets exec_a;

    
    contains(b.DoSurvey exec_b);
    exec_b meets survey_b;    
    starts_during(condition b.Inactive idle_b);
    idle_b meets exec_b;

    // Maybe too restrictive but it will do for now
    idle_b contains last_pos;
    idle_a contains last_pos;

    // This part is way too constrained ... need to hava more reactive approach to it
    int max_delta;
    float delta_f;
    starts_during(UAV.fly search);
    search contains_start last_pos;
    temporalDistance(search.start, max_delta, start);
    ceil(delta_f) == max_delta;
    delta_f * TICK_DURATION <= 600.0;
    
    
    

    TrexPath path_a, path_b;
    AUV auv_a, auv_b;

    auv_a.drifter == a;
    path_a == survey_a.path;
    auv_b.drifter == b;
    path_b == survey_b.path;

    contained_by(SpeedControl.Holds speed_a);
    speed_a.object == auv_a.speed;
    contained_by(SpeedControl.Holds speed_b);
    speed_b.object == auv_b.speed;

    float distance_a, travel_a, wait_a, wp_a, distance_b, travel_b, wait_b, wp_b;

    // compute timing approximate for a
    distance_a == (path_a.distance * active.scale);
    (travel_a * speed_a.speed) == distance_a;
    wp_a == path_a.waypoints;
    wait_a == (wp_a * auv_a.waypoint_idle);

    // compute timeinig apporximate for b
    distance_b == (path_b.distance * scale_inner);
    (travel_b * speed_b.speed) == distance_b;
    wp_b == path_b.waypoints;
    wait_b == (wp_b * auv_b.waypoint_idle);

    // make it so that these 2 estimates are equal
    float estimate;
    estimate * TICK_DURATION == (travel_a + wait_a);
    estimate * TICK_DURATION == (travel_b + wait_b);
    active.estimated_duration == ceil(estimate);
    temporalDistance(last_pos.start, active.estimated_duration,
		     active.end_estimate);
}

