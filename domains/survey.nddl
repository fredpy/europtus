/*********************************************************************
 * Software License Agreement (BSD License)
 * 
 *  Copyright (c) 2015, Frederic Py.
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 * 
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the TREX Project nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
#include "Whale.nddl"

// Model instanciation

// Define the lagrangian paths we use in an abstract form
TrexPath square = new TrexPath(4.0, -0.5, 0.5);
TrexPath square_twice = new TrexPath(8.0, -0.5, 0.5);
survey_pair two_squares = new survey_pair(square, square_twice);

// vehicle timelines

AUV auv1 = new AUV(0.5, 1.75);
AUV auv2 = new AUV(0.5, 1.75);

// set the AUVs speed

fact(auv1.speed.Holds sp_1);
precedes(sp_1.start, 0);
precedes(CUR_DATE, sp_1.end);
precedes(FINAL_TICK, sp_1.end);
sp_1.speed.specify(1.25);

fact(auv2.speed.Holds sp_2);
precedes(sp_2.start, 0);
precedes(CUR_DATE, sp_2.end);
precedes(FINAL_TICK, sp_2.end);
sp_2.speed.specify(1.25);

// set the whale object with uav autonomy to 30mn

UAV    lsts = new UAV(1800.0, 900.0);
Whale  whale = new Whale();

// strat as Inactive
fact(whale.survey.Inactive idle);
precedes(idle.start, 0);
precedes(0, idle.end);

fact(Battery.consume init);
init.object.specify(lsts.battery);
init.start.specify(0);
init.current_level == 100.0;

// request to be active
rejectable(WhaleFollow.Active follow);
follow.surveys.specify(two_squares);
follow.scale.specify(800.0);



// rejectable(DrifterFollow.Survey survey);
// precedes(0, survey.start);
// precedes(survey.start, FINAL_TICK);

// survey.center_lat.specify(0.6658485111);
// survey.center_lon.specify(-0.4966177319);
// survey.heading.specify(0.0);
// survey.lagrangian.specify(true);
// survey.path.specify(square);
// survey.size.specify(600.0);
