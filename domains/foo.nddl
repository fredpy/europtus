/*********************************************************************
 * Software License Agreement (BSD License)
 * 
 *  Copyright (c) 2015, Frederic Py.
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 * 
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the TREX Project nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
#include "Plasma.nddl"


float TICK_DURATION; // duration of a tick in seconds (determined by europtus)
int   CUR_DATE; // update as the tick is advancing in real-time (by europtus)
              	//   its value should remain [cur-tick, +inf)
                //  and it shoud be only used to compare against other time points
int   FINAL_TICK;

class Position extends Timeline {

  predicate at {
    float latitude, longitude;
  }
  predicate transit {}

  Position() {
    super();
  }
}

class Trash {
  predicate Can{}

  Trash() {}
}

class PendingDoom {
  predicate doom {}

  PendingDoom() {}
}

PendingDoom::doom {
  if( 3 <=CUR_DATE ) {
    starts(Trash.Can can);
    precedes(can.end, start);
  }
}
  
class AUV extends Timeline {
  Position    pos;
  PendingDoom bam;
  float max_speed;

  action move {
    start<=FINAL_TICK; 
    float speed;
    float distance;
    speed > 0.0;
    distance >= 0.0;
  }

  AUV() {
    super();
    pos = new Position();
    bam = new PendingDoom();
    max_speed = 1.75;
  }
}

AUV::move {
  Position my_pos = object.pos;
  PendingDoom my_doom = object.bam;
  float max_speed = object.max_speed;

  meets(effect Position.at dest);
  starts_during(condition Position.at source);

  dest.object == my_pos;
  source.object == my_pos;

  starts(condition PendingDoom.doom kaboom);
  kaboom.object == my_doom;

  speed >= 0.2;
  speed <= max_speed;
  
  // float duration_f, duration_sec;

  temporalDistance(start, duration, end);
  //ceil(duration_f) == duration;
  //duration_sec == duration_f * TICK_DURATION;
  

  float rla_1, rlo_1, rla_2, rlo_2;

  // to_rad(source.latitude) == rla_1;
  // to_rad(source.longitude) == rlo_1;
  // to_rad(dest.latitude) == rla_2;
  // to_rad(dest.longitude) == rlo_2;
  
  // ll_dist(rla_1, rlo_1, rla_2, rlo_2) == distance;
  // distance <= duration_sec * speed;
  
}

class Foo extends Timeline {
      predicate Bar {}

      Foo() {}
}

AUV xtreme1 = new AUV();
Trash t = new Trash();
Foo foo = new Foo();

fact(xtreme1.pos.at initial);

initial.start    = 0;
initial.latitude = 12.5;
initial.longitude = 32.6;

rejectable(xtreme1.pos.at dest);

0 <= dest.start;
dest.start <= FINAL_TICK;
dest.latitude = 12.5001;
dest.longitude = 32.5999;
